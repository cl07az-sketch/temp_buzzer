#!/usr/bin/env python3
import os
import glob
import time
import RPi.GPIO as GPIO

# Define GPIO pins
BuzzerPin = 11   # Buzzer pin
ButtonPin = 13   # Button pin

def setup():
    """Setup GPIO pins"""
    GPIO.setmode(GPIO.BOARD)
    GPIO.setup(BuzzerPin, GPIO.OUT)
    GPIO.setup(ButtonPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Pull-up resistor for button
    GPIO.output(BuzzerPin, GPIO.HIGH)

def buzzer_on():
    """Turn the buzzer on"""
    GPIO.output(BuzzerPin, GPIO.LOW)

def buzzer_off():
    """Turn the buzzer off"""
    GPIO.output(BuzzerPin, GPIO.HIGH)

# Load 1-wire device kernel modules for DS18B20
os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')

# Locate the sensor
base_dir = '/sys/bus/w1/devices/'
device_folder = glob.glob(base_dir + '28*')[0]
device_file = device_folder + '/w1_slave'

def read_rom():
    """Read sensor ROM ID"""
    with open(device_folder + '/name', 'r') as f:
        return f.readline().strip()

def read_temp_raw():
    """Read the raw temperature data"""
    with open(device_file, 'r') as f:
        lines = f.readlines()
    return lines

def read_temp():
    """Read and parse temperature in Fahrenheit"""
    lines = read_temp_raw()
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = read_temp_raw()
    equals_pos = lines[1].find('t=')
    if equals_pos != -1:
        temp_string = lines[1][equals_pos + 2:]
        temp_c = float(temp_string) / 1000.0
        temp_f = temp_c * 9.0 / 5.0 + 32.0
        return temp_f

def loop():
    """Main loop that monitors temperature and toggles active state with button"""
    print("System started. Press the button to toggle monitoring ON/OFF.")
    monitoring = True  # Start in ON state
    last_button_state = GPIO.input(ButtonPin)
    debounce_time = 0.2  # seconds

    while True:
        current_button_state = GPIO.input(ButtonPin)

        # Detect button press (falling edge)
        if last_button_state == GPIO.HIGH and current_button_state == GPIO.LOW:
            monitoring = not monitoring
            if monitoring:
                print("Monitoring RESUMED.")
            else:
                print("Monitoring PAUSED.")
                buzzer_off()
            time.sleep(debounce_time)

        last_button_state = current_button_state

        # Only run temperature and buzzer logic if monitoring is active
        if monitoring:
            temp = read_temp()
            print('Temperature: {:.2f} Â°F'.format(temp))

            if temp < 70:
                buzzer_on()
                time.sleep(2)
                buzzer_off()
            else:
                buzzer_off()
                time.sleep(0.3)
        else:
            # When paused, keep buzzer off and just idle
            buzzer_off()
            time.sleep(0.1)

def destroy():
    """Cleanup GPIO pins"""
    buzzer_off()
    GPIO.cleanup()

if __name__ == "__main__":
    setup()
    try:
        loop()
    except KeyboardInterrupt:
        print("\nKeyboard interrupt detected. Exiting program...")
    finally:
        destroy()
