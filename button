#!/usr/bin/env python3
import os
import glob
import time
import RPi.GPIO as GPIO

# Define GPIO pins
BuzzerPin = 11   # Buzzer pin
ButtonPin = 13   # Button pin

def setup():
    """Setup GPIO pins"""
    GPIO.setmode(GPIO.BOARD)
    GPIO.setup(BuzzerPin, GPIO.OUT)
    GPIO.setup(ButtonPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
    GPIO.output(BuzzerPin, GPIO.HIGH)

def buzzer_on():
    GPIO.output(BuzzerPin, GPIO.LOW)

def buzzer_off():
    GPIO.output(BuzzerPin, GPIO.HIGH)

# Load 1-wire device kernel modules for DS18B20
os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')

# Locate the sensor
base_dir = '/sys/bus/w1/devices/'
try:
    device_folder = glob.glob(base_dir + '28*')[0]
except IndexError:
    print("Error: No DS18B20 sensor detected. Check wiring.")
    exit(1)
device_file = device_folder + '/w1_slave'

def read_temp_raw():
    with open(device_file, 'r') as f:
        lines = f.readlines()
    return lines

def read_temp():
    """Read and parse temperature in Fahrenheit"""
    lines = read_temp_raw()
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = read_temp_raw()
    equals_pos = lines[1].find('t=')
    if equals_pos != -1:
        temp_string = lines[1][equals_pos + 2:]
        temp_c = float(temp_string) / 1000.0
        temp_f = temp_c * 9.0 / 5.0 + 32.0
        return temp_f

def loop():
    """Main loop that monitors temperature and toggles active state with button"""
    print("System started. Press the button to toggle monitoring ON/OFF.")
    monitoring = True
    last_button_state = GPIO.input(ButtonPin)
    debounce_time = 0.2

    buzzer_active = False
    buzzer_start_time = 0

    while True:
        current_button_state = GPIO.input(ButtonPin)

        # Always check for button presses
        if last_button_state == GPIO.HIGH and current_button_state == GPIO.LOW:
            monitoring = not monitoring
            if monitoring:
                print("\nMonitoring RESUMED.")
            else:
                print("\nMonitoring PAUSED.")
                buzzer_off()
                buzzer_active = False
            time.sleep(debounce_time)
        last_button_state = current_button_state

        if monitoring:
            temp = read_temp()
            print(f"Temperature: {temp:.2f} Â°F", end="\r")

            # Trigger buzzer for 2 seconds when temp < 70
            if temp < 80 and not buzzer_active:
                buzzer_on()
                buzzer_active = True
                buzzer_start_time = time.time()

            # Turn off buzzer after 2 seconds
            if buzzer_active and time.time() - buzzer_start_time >= 2:
                buzzer_off()
                buzzer_active = False

        else:
            buzzer_off()
            buzzer_active = False

        time.sleep(0.1)  # Small delay to prevent CPU overload

def destroy():
    buzzer_off()
    GPIO.cleanup()

if __name__ == "__main__":
    setup()
    try:
        loop()
    except KeyboardInterrupt:
        print("\nKeyboard interrupt detected. Exiting program...")
    finally:
        destroy()
